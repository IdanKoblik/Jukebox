name: Update docs

on:
  workflow_call:
    inputs:
      VERSION:
        description: 'Version name'
        required: true
        type: string
    secrets:
      GH_PAGES_TOKEN:
        required: true
      OSSRH_USERNAME:
        required: true
      OSSRH_PASSWORD:
        required: true
      SIGNING_SECRET:
        required: true
      SIGNING_PASSWORD:
        required: true
      APARTIUM_NEXUS_USERNAME:
        required: true
      APARTIUM_NEXUS_PASSWORD:
        required: true

permissions:
  pull-requests: write
  contents: write
  repository-projects: write
  packages: write
  pages: write
  id-token: write

env:
  INSTANCE: 'Writerside/w'
  ARTIFACT: 'webHelpHI2-all.zip'
  DOCKER_VERSION: '233.14938'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  upload:
    runs-on: ubuntu-latest
    env:
      new_version: ${{ inputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install SSH Client ðŸ”‘
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.GH_PAGES_TOKEN }}

      - name: Setup git
        run: |
                git remote rm origin
                git remote add origin git@github.com:${{ github.repository }}
                git config --local user.email "actions@github.com"
                git config --local user.name "GitHub Actions"

      - name: Fetch previus version
        id: perv_version
        run: |
          git fetch origin
          echo "::set-output name=version::$(git tag -l | sort -V | tail -n 1)"

      - name: Determine version changes
        id: determine_version
        run: |
          git fetch origin
          CURRENT_VERSION=${{ steps.perv_version.outputs.version }}
          INPUT_VERSION=${{ inputs.VERSION }}
          
          CURRENT_VERSION=${CURRENT_VERSION#v}
          INPUT_VERSION=${INPUT_VERSION#v}
          
          IFS='.' read -ra CURRENT <<< "$CURRENT_VERSION"
          IFS='.' read -ra INPUT <<< "$INPUT_VERSION"
          
          echo "Current version array: ${CURRENT[@]}"
          echo "Input version array: ${INPUT[@]}"
          
          echo "::set-output name=is_minor::$([ "${INPUT[0]}" == "${CURRENT[0]}" ] && [ "${INPUT[1]}" == "${CURRENT[1]}" ] && [ "${INPUT[2]}" != "${CURRENT[2]}" ] && echo true || echo false)"

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Pre writerside
        env:
          new_version: ${{ inputs.VERSION }}
        run: sh build-scripts/pre-writerside.sh

      - name: javadoc
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_SECRET: ${{ secrets.SIGNING_SECRET }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          APARTIUM_NEXUS_USERNAME: ${{ secrets.APARTIUM_NEXUS_USERNAME }}
          APARTIUM_NEXUS_PASSWORD: ${{ secrets.APARTIUM_NEXUS_PASSWORD }}
          VERSION: ${{ inputs.VERSION }}
        run: ./gradlew build

      - name: Build Writerside docs using Docker
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: run docs script
        env:
          docs: ${{ inputs.VERSION }}
        run: |
          sh build-scripts/prepare-web-output.sh

      - name: Remove javadoc jars
        run: find . -type f -path "*/build/libs/*.jar" | grep "javadoc" | xargs rm -f

      - name: Update HTML
        env:
          $version: ${{ inputs.VERSION }}
        run: |
          git fetch origin
          
          git checkout -b pages origin/pages || git checkout -b pages
                  
          sed -i 's|url=https://idankoblik.github.io/Jukebox/[^/]*/">|url=https://idankoblik.github.io/Jukebox/'"$version"'/">|' "index.html"
          git add index.html
          git commit -m "Update index.html"
          
          ls -la

      - name: Override docs
        if: steps.determine_version.outputs.is_minor == 'true'
        env:
          version: ${{ inputs.VERSION }}
          perv_version: ${{ steps.perv_version.outputs.version }}
        run: |
          if [ -d "$perv_version" ]; then
          echo "Creating old version directory for version $perv_version"
          git rm -rf $perv_version/
          git commit -m "Removed old version"
          
          git add $version/
          json_file="help-versions.json"
          
          new_element=$(cat <<EOF
          {
          "version": "$version",
          "url": "/\($version)\/",
          "isCurrent": true
          } 
          EOF
          )
          
          updated_json=$(jq --arg version "$version" '
               .[-1].version = $version |
               .[-1].url = "/\($version)\/" |
               .[-1].isCurrent = true |
               .[0:-1] |= map(.isCurrent = false)
           ' "$json_file")
          
          echo "$updated_json" > "$json_file"
          
          git add help-versions.json
          git commit -m "Override docs in github pages branch" || echo "No changes to commit"
          else
           echo "NOT GOOD"
           exit 1
          fi

      - name: Update docs
        if: steps.determine_version.outputs.is_minor == 'false'
        env:
          version: ${{ inputs.VERSION }}
        run: |
          json_file="help-versions.json"
          
            new_element=$(cat <<EOF
          {
          "version": "$version",
          "url": "/$version/",
          "isCurrent": true
          } 
          EOF
          )
          
           updated_json=$(jq --argjson new "$new_element" '
               map(.isCurrent = false) + [$new]
           ' "$json_file")
          
           echo "$updated_json" > "$json_file"
          
           git add help-versions.json
           git commit -m "Update docs in github pages branch" || echo "No changes to commit"

      - name: Push
        run: |
          git push origin pages